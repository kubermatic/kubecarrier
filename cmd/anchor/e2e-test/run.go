/*
Copyright 2019 The Kubecarrier Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package e2e_test

import (
	"fmt"
	"io"
	"os"
	"testing"

	"github.com/spf13/cobra"
)

type matchStringOnly func(pat, str string) (bool, error)

func (f matchStringOnly) MatchString(pat, str string) (bool, error) { return f(pat, str) }
func (f matchStringOnly) StartCPUProfile(w io.Writer) error         { return fmt.Errorf("not implemented") }
func (f matchStringOnly) StopCPUProfile()                           {}
func (f matchStringOnly) WriteProfileTo(string, io.Writer, int) error {
	return fmt.Errorf("not implemented")
}
func (f matchStringOnly) ImportPath() string     { return "" }
func (f matchStringOnly) StartTestLog(io.Writer) {}
func (f matchStringOnly) StopTestLog() error     { return fmt.Errorf("not implemented") }

func newRunCommand() *cobra.Command {
	cmd := &cobra.Command{
		Use:   "run",
		Short: "run all end2end test",
		RunE: func(cmd *cobra.Command, args []string) error {
			tests := []testing.InternalTest{
				{
					Name: "TestExample",
					F: func(t *testing.T) {
						t.Log("hey, I'm alive")
					},
				},
				{
					Name: "TestSuiteRequireTwice",
					F: func(t *testing.T) {
						t.Log("ok; I'm alive")
						t.Fail()
					},
				},
			}
			var s matchStringOnly = func(pat, str string) (b bool, e error) {
				return true, nil
			}
			// To c/p go 1.13 documentation for MainStart

			// MainStart is meant for use by tests generated by 'go test'.
			// It is not meant to be called directly and is not subject to the Go 1 compatibility document.
			// It may change signature from release to release.

			// Alternately there's testing.RunTests function, but it requires some global state to be set
			// (( more specifically testing.cpulist == nil, and it loops over all cpulist inside the code ))

			m := testing.MainStart(s, tests, nil, nil)
			if code := m.Run(); code != 0 {
				os.Exit(code)
			}
			return nil
		},
	}
	return cmd
}
