/*
Copyright 2020 The KubeCarrier Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by protoc-gen-go. DO NOT EDIT.
// source: doc.proto

package v1

import (
	context "context"
	fmt "fmt"
	math "math"

	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	httpbody "google.golang.org/genproto/googleapis/api/httpbody"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() {
	proto.RegisterFile("doc.proto", fileDescriptor_37cb16cf10c66117)
}

var fileDescriptor_37cb16cf10c66117 = []byte{
	// 202 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4c, 0xc9, 0x4f, 0xd6,
	0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x12, 0xca, 0x2e, 0x4d, 0x4a, 0x4d, 0x4e, 0x2c, 0x2a, 0xca,
	0x4c, 0x2d, 0xd2, 0x4b, 0x2c, 0xc8, 0xd4, 0x2b, 0x33, 0x94, 0x92, 0x4c, 0xcf, 0xcf, 0x4f, 0xcf,
	0x49, 0xd5, 0x4f, 0x2c, 0xc8, 0xd4, 0xcf, 0x28, 0x29, 0x29, 0x48, 0xca, 0x4f, 0xa9, 0x84, 0x28,
	0x97, 0x92, 0x41, 0x92, 0x4a, 0xcc, 0xcb, 0xcb, 0x2f, 0x49, 0x2c, 0xc9, 0xcc, 0xcf, 0x2b, 0x86,
	0xca, 0x4a, 0x43, 0x65, 0xc1, 0xbc, 0xa4, 0xd2, 0x34, 0xfd, 0xd4, 0xdc, 0x82, 0x12, 0xa8, 0x56,
	0xa3, 0x85, 0x8c, 0x5c, 0xcc, 0x2e, 0xf9, 0xc9, 0x42, 0x3e, 0x5c, 0xec, 0xfe, 0x05, 0xa9, 0x79,
	0x8e, 0x01, 0x9e, 0x42, 0x62, 0x7a, 0x10, 0x0d, 0x7a, 0x30, 0x0d, 0x7a, 0xae, 0x20, 0x0d, 0x52,
	0x22, 0x30, 0x71, 0x90, 0x83, 0x3c, 0x4a, 0x4a, 0x0a, 0x9c, 0xf2, 0x53, 0x2a, 0x95, 0x84, 0x9b,
	0x2e, 0x3f, 0x99, 0xcc, 0xc4, 0x2b, 0xc4, 0xad, 0x5f, 0x66, 0xa8, 0x9f, 0x5f, 0x90, 0x9a, 0x97,
	0x58, 0x90, 0x09, 0x32, 0x2d, 0xb8, 0x3c, 0x31, 0x3d, 0x3d, 0xb5, 0x88, 0x12, 0xd3, 0x8a, 0x21,
	0x46, 0x38, 0xb1, 0x44, 0x31, 0x95, 0x19, 0x26, 0xb1, 0x81, 0x0d, 0x30, 0x06, 0x04, 0x00, 0x00,
	0xff, 0xff, 0xb2, 0xaa, 0x8a, 0x3c, 0x27, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// DocClient is the client API for Doc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DocClient interface {
	OpenAPI(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*httpbody.HttpBody, error)
	Swagger(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*httpbody.HttpBody, error)
}

type docClient struct {
	cc grpc.ClientConnInterface
}

func NewDocClient(cc grpc.ClientConnInterface) DocClient {
	return &docClient{cc}
}

func (c *docClient) OpenAPI(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*httpbody.HttpBody, error) {
	out := new(httpbody.HttpBody)
	err := c.cc.Invoke(ctx, "/kubecarrier.api.v1.Doc/OpenAPI", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *docClient) Swagger(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*httpbody.HttpBody, error) {
	out := new(httpbody.HttpBody)
	err := c.cc.Invoke(ctx, "/kubecarrier.api.v1.Doc/Swagger", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DocServer is the server API for Doc service.
type DocServer interface {
	OpenAPI(context.Context, *empty.Empty) (*httpbody.HttpBody, error)
	Swagger(context.Context, *empty.Empty) (*httpbody.HttpBody, error)
}

// UnimplementedDocServer can be embedded to have forward compatible implementations.
type UnimplementedDocServer struct {
}

func (*UnimplementedDocServer) OpenAPI(ctx context.Context, req *empty.Empty) (*httpbody.HttpBody, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpenAPI not implemented")
}
func (*UnimplementedDocServer) Swagger(ctx context.Context, req *empty.Empty) (*httpbody.HttpBody, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Swagger not implemented")
}

func RegisterDocServer(s *grpc.Server, srv DocServer) {
	s.RegisterService(&_Doc_serviceDesc, srv)
}

func _Doc_OpenAPI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocServer).OpenAPI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kubecarrier.api.v1.Doc/OpenAPI",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocServer).OpenAPI(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Doc_Swagger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocServer).Swagger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kubecarrier.api.v1.Doc/Swagger",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocServer).Swagger(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _Doc_serviceDesc = grpc.ServiceDesc{
	ServiceName: "kubecarrier.api.v1.Doc",
	HandlerType: (*DocServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OpenAPI",
			Handler:    _Doc_OpenAPI_Handler,
		},
		{
			MethodName: "Swagger",
			Handler:    _Doc_Swagger_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "doc.proto",
}
